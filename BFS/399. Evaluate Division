Python:
class Solution(object):
    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        graph = {}
        
        def add_edge(start, end, value):
            if start in graph:
                graph[start].append((end,value))
            else:
                graph[start] = [(end,value)]
                
        for i in range(len(equations)):
            add_edge(equations[i][0], equations[i][1], values[i])
            add_edge(equations[i][1], equations[i][0], 1.0/values[i])
            
        def find_path(start, end):
            if start not in graph or end not in graph:
                return -1.0
            
            nodes = [(start, 1.0)]
            visit = set()
            
            while nodes:
                node, value = nodes.pop(0)
                visit.add(node)
                
                if node == end:
                    return value
                
                for i in graph[node]:
                    if i[0] not in visit:
                        nodes.append((i[0], value * i[1]))
                
            return -1.0
            
        res = []
        for i in queries:
            res.append(find_path(i[0], i[1]))
        
        return res

Java:
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String, Map<String, Double>> graph = new HashMap<>();
        for(int i = 0; i < values.length; i++){
            graph.putIfAbsent(equations.get(i).get(0), new HashMap<>());
            graph.putIfAbsent(equations.get(i).get(1), new HashMap<>());
            graph.get(equations.get(i).get(0)).put(equations.get(i).get(1), values[i]);
            graph.get(equations.get(i).get(1)).put(equations.get(i).get(0), 1/values[i]);
        }
        double[] res = new double[queries.size()];
        for(int i = 0; i < queries.size();i++){
            res[i] = bfs(queries.get(i).get(0), queries.get(i).get(1), 1, graph, new HashSet<>());
        }
        return res;
    }
    private double bfs(String start, String end, double value, Map<String, Map<String, Double>> graph, Set<String> visited){
        if(!graph.containsKey(start) || !graph.containsKey(end) || !visited.add(start)) return -1;
        if(start.equals(end)) return value;
        Map<String, Double> next = graph.get(start);
        for(String s : next.keySet()){
            double res = bfs(s, end, value * next.get(s), graph, visited);
            if (res != -1) return res;
        }
        return -1;
    }   
}
