Python:
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        wordList = set(wordList)
        path = [[beginWord,1]]
        while path:
            word, length = path.pop(0)
            if word == endWord:
                return length
            for i in range(len(word)):
                for c in "abcdefghijklmnopqrstuvwxyz":
                    newword = word[:i] + c + word[i+1:]
                    if newword in wordList:
                        wordList.remove(newword)
                        path.append([newword, length+1])
        return 0 

Java:
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> words) {
        Set<String> wordList = new HashSet<>(words);
        Set<String> reached = new HashSet<>();
        reached.add(beginWord);
        int res = 1;
        while(!reached.contains(endWord)){
            Set<String> newReached = new HashSet<>();
            for(String word: reached){
                for(int i = 0; i < word.length(); i++){
                    char[] chars = word.toCharArray();
                    for(char c = 'a'; c <= 'z';c++){
                        chars[i] = c;
                        String newWord = new String(chars);
                        if(wordList.contains(newWord)){
                            newReached.add(newWord);
                            wordList.remove(newWord);
                        }
                    }       
                }
            }
            if(newReached.size()==0) return 0;
            res ++;
            reached = newReached;
        }
        return res;
    }
}
