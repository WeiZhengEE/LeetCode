Python:
class Solution:
    def numSquares(self, n: int) -> int:
        if n < 2:
            return n
        nums = set()
        i = 1
        while i * i <= n:
            nums.add( i * i )
            i += 1
        count = 0
        check = set([n])
        while check:
            count += 1
            newcheck = set()
            for i in check:
                if i in nums:
                    return count
                for j in nums:
                    if i-j > 0:
                        newcheck.add(i-j)
            check = newcheck
        return count

Java:
class Solution {
    public int numSquares(int n) {
        if(n < 2) return n;
        Set<Integer> squares = new HashSet<>();
        for(int i = 1; i*i<=n; i++) squares.add(i*i);
        int count = 0;
        Set<Integer> nums = new HashSet<>();
        nums.add(n);
        while(nums.size() != 0){
            count++;
            Set<Integer> newNums = new HashSet<>();
            for(int num: nums){
                if(squares.contains(num)) return count;
                for(int square: squares){
                    if(num-square > 0) newNums.add(num-square);
                }
            }
            nums = newNums;
        }
        return count;        
    }
}
