Python:
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        start = maxLength = 0
        usedChar = {}

        for i in range(len(s)):
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)

            usedChar[s[i]] = i

        return maxLength

Java:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int start = 0;
        int maxLength = 0;
        Map<Character, Integer> lastIndex = new HashMap<>();
        for(int i = 0;i < s.length();i++){
            char temp = s.charAt(i);
            if(lastIndex.containsKey(temp) && start <= lastIndex.get(temp)){
                start = lastIndex.get(temp)+1;
            }else if(i - start + 1 > maxLength){
                maxLength = i - start + 1;
            }
            lastIndex.put(temp, i);
        }
        return maxLength;
    }
}
