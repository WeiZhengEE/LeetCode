Python:
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder:
            return None       
        idx = inorder.index(preorder[0])
        l_inorder = inorder[:idx]
        r_inorder = inorder[idx+1:]
        l_preorder = preorder[1:len(l_inorder)+1]
        r_preorder = preorder[len(l_inorder)+1:]
        root = TreeNode(preorder[0])
        root.left = self.buildTree(l_preorder, l_inorder)
        root.right = self.buildTree(r_preorder, r_inorder)
        return root
        
Java:
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> inMap = new HashMap<>();

    for(int i = 0; i < inorder.length; i++) {
        inMap.put(inorder[i], i);
    }

    TreeNode root = helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, inMap);
    return root;
    }
    
    public TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> inMap){
        if(preStart > preEnd || inStart > inEnd) return null;
        
        TreeNode root = new TreeNode(preorder[preStart]);
        int inRoot = inMap.get(root.val);
        int numsLeft = inRoot - inStart;
        
        root.left = helper(preorder, preStart + 1, preStart+numsLeft, inorder, inStart, inRoot-1, inMap);
        root.right = helper(preorder, preStart+numsLeft+1, preEnd, inorder, inRoot+1, inEnd, inMap);
        
        return root;
    }
}
