Python:
class Solution:
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        flag = False
        result = []
        stack = [root]
        while stack:
            res = []
            newstack = []
            for i in stack:
                res.append(i.val)
                if i.left:
                    newstack.append(i.left)
                if i.right:
                    newstack.append(i.right)
            if flag:
                res.reverse()
            flag = not flag
            result.append(res)
            stack = newstack
        return result

Java:
import java.util.Collections;
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        List<TreeNode> nodes = new ArrayList<>();
        boolean flag = false;
        nodes.add(root);
        while(nodes.size() != 0){
            List<TreeNode> newNodes = new ArrayList<>();
            List<Integer> nodeVal = new ArrayList<>();
            for(TreeNode node : nodes){
                nodeVal.add(node.val);
                if(node.left != null) newNodes.add(node.left);
                if(node.right != null) newNodes.add(node.right);
            }
            if(flag) Collections.reverse(nodeVal);
            flag = !flag;
            res.add(nodeVal);
            nodes = newNodes;
        }
        return res;
    }
}
