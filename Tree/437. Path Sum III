Python:
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> int:
        self.res = 0
        self.pathrecord = {0:1}
        self.dfs(root, sum, 0)
        return self.res
        
    def dfs(self, root, target, lastsum):
        if not root:
            return
        currentsum = lastsum + root.val
        oldsum = currentsum - target
        self.res += self.pathrecord.get(oldsum, 0)
        self.pathrecord[currentsum] = self.pathrecord.get(currentsum, 0) + 1
        
        self.dfs(root.left, target, currentsum)
        self.dfs(root.right, target, currentsum)
        
        self.pathrecord[currentsum] -= 1

Java:
class Solution {
    private int res;
    private Map<Integer, Integer> pathSum;
    
    public int pathSum(TreeNode root, int sum) {
        this.res = 0;
        this.pathSum = new HashMap<>();
        pathSum.put(0, 1);
        
        dfs(root, sum, 0);
        return this.res;
        
    }
    public void dfs(TreeNode root, int target, int lastSum){
        if(root == null) return;
        int curSum = lastSum + root.val;
        int oldSum = curSum - target;
        this.res += pathSum.getOrDefault(oldSum, 0);
        this.pathSum.put(curSum, pathSum.getOrDefault(curSum, 0)+1);
        
        dfs(root.left, target, curSum);
        dfs(root.right, target, curSum);
        this.pathSum.put(curSum, this.pathSum.get(curSum)-1);
    } 
}
