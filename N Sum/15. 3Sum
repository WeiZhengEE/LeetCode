Python:
def threeSum(self, nums):
    res = []
    nums.sort()
    for i in range(len(nums)-2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        l, r = i+1, len(nums)-1
        while l < r:
            s = nums[i] + nums[l] + nums[r]
            if s < 0:
                l +=1 
            elif s > 0:
                r -= 1
            else:
                res.append([nums[i], nums[l], nums[r]])                
                while l < r and nums[l] == nums[l+1]:
                    l += 1
                l += 1
                while l < r and nums[r] == nums[r-1]:
                    r -= 1
                r -= 1
    return res
    
Java:
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new LinkedList<>();
        Arrays.sort(nums);
        for(int i=0;i < nums.length-2;i++){
            if (i == 0 || nums[i] != nums[i-1]){
                int l = i+1;
                int r = nums.length-1;
                int target = 0-nums[i];
                while(l < r){
                    if(nums[l]+nums[r]==target){
                        res.add(Arrays.asList(nums[i],nums[l],nums[r]));
                        while (l < r && nums[l]==nums[l+1]) l++;
                        while (l < r && nums[r]==nums[r-1]) r--;
                        l++;
                        r--;
                    }else if(nums[l]+nums[r] < target){
                        l++;
                    }else{
                        r--;
                    }
                }
            }
        }
        return res;
    }
}
