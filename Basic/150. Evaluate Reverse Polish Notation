Python:
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for i in range(len(tokens)):
            if tokens[i] not in ['+','-','*','/']:
                stack.append(tokens[i])
            elif tokens[i] == '+':
                temp = int(stack.pop()) + int(stack.pop())
                stack.append(str(temp))
            elif tokens[i] == '-':
                temp = int(stack.pop(-2)) - int(stack.pop())
                stack.append(str(temp))
            elif tokens[i] == '*':
                temp = int(stack.pop()) * int(stack.pop())
                stack.append(str(temp))
            else:
                temp = int(float(stack.pop(-2)) / float(stack.pop()))
                stack.append(str(temp))
        return int(stack[0])

Java:
import java.util.Stack;
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        int num1 = 0;
        int num2 = 0;
        for(String token:tokens){
            if(token.equals("+")){
                stack.push(stack.pop()+stack.pop());
            }else if(token.equals("-")){
                num2 = stack.pop();
                num1 = stack.pop();
                stack.push(num1-num2);
            }else if(token.equals("*")){
                stack.push(stack.pop()*stack.pop());
            }else if(token.equals("/")){
                num2 = stack.pop();
                num1 = stack.pop();
                stack.push(num1/num2); 
            }else{
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.pop();
    }
}
