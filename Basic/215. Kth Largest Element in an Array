Python:
import heapq
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap = []
        for num in nums:
            heapq.heappush(heap, -num)
        for i in range(k):
            temp = heapq.heappop(heap)
        return -temp

Java:
class Solution {
    public int findKthLargest(int[] nums, int k) {
        quickSort(nums, 0, nums.length-1);
        return nums[nums.length-k];
        
    }
    
    public void quickSort(int[] nums, int l, int r){
        if(l<r){
            int p = partition(nums, l, r);
            quickSort(nums, l, p-1);
            quickSort(nums, p+1, r);
        }
    }
    
    public int partition(int[] nums, int l, int r){
        int pValue = nums[l];
        int i = l;
        int j = r;
        int temp;
        while(i<j){
            while(i <= r && nums[i] <= pValue) i++;
            while(nums[j] > pValue) j--;
            if(i<j){
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
        nums[l] = nums[j];
        nums[j] = pValue;
        return j;
    }
}
