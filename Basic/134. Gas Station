Python:
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        if len(gas) == 0 or sum(gas) < sum(cost):
            return -1
        position = 0
        balance = 0
        for i in range(len(gas)):
            balance += gas[i] - cost[i]
            if balance < 0:
                balance = 0
                position = i+1
        return position

Java:
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int sum = 0;
        int remain = 0;
        int res = 0;
        for(int i=0;i<gas.length;i++){
            sum += gas[i]-cost[i];
            remain += gas[i]-cost[i];
            if(remain < 0){
                remain = 0;
                res = i+1;
            }
        }
        if(sum<0) return -1;
        return res;        
    }
}
