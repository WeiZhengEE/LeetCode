Python:
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1

        low, high = 0, len(nums) - 1

        while low <= high:
            mid = (low + high) / 2
            if target == nums[mid]:
                return mid

            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

Java:
class Solution {
    public int search(int[] nums, int target) {
        if(null == nums || nums.length == 0) return -1;
        int l = 0;
        int r = nums.length-1;
        int m;
        while(l<=r){
            m = (l+r)/2;
            if(nums[m] == target) return m;
            if(nums[l] <= nums[m]){
                if(nums[l] <= target && target <= nums[m]){
                    r = m - 1;
                }else{
                    l = m + 1;
                }
            }else{
                if(nums[m] <= target && target <= nums[r]){
                    l = m + 1;
                }else{
                    r = m - 1;
                }
            }
        }
        return -1;
    }
}
