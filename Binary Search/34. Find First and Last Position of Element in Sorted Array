Python:
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums:
            return [-1,-1]
        res = [self.findfirst(nums, target)]
        if res[0] == -1:
            return [-1,-1]
        res.append(self.findlast(nums, target))
        return res
           
    def findfirst(self, nums, target):
        l = 0
        r = len(nums)-1
        while l <= r:
            m = (l+r)//2
            if nums[m] < target:
                l = m + 1
            else:
                r = m - 1
        if l < len(nums) and nums[l] == target:
            return l
        return -1
    
    def findlast(self, nums, target):
        l = 0
        r = len(nums)-1
        while l <= r:
            m = (l+r)//2
            if nums[m] > target:
                r = m - 1
            else:
                l = m + 1
        if r < len(nums) and nums[r] == target:
            return r
        return -1

Java:
class Solution {
    public int[] searchRange(int[] nums, int target) {
       int[] res = new int[2];
        res[0] = findFirst(nums, target);
        res[1] = res[0] == -1 ? -1 : findLast(nums, target);
        return res;
    }
    
    private int findFirst(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
        int m;
        while(l <= r){
            m = (l+r)/2;
            if(nums[m] < target){
                l = m+1;
            }else{
                r = m-1;
            }
        }
        if(l < nums.length && nums[l] == target) return l;
        return -1;
    }
    
    private int findLast(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
        int m;
        while(l <= r){
            m = (l+r)/2;
            if(nums[m] > target){
                r = m-1;
            }else{
                l = m+1;
            }
        }
        if(nums[r] == target) return r;
        return -1;
    }
}
