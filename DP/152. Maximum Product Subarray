Python:
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        dp = [-float('inf')]*len(nums)
        dp[0] = nums[0]
        dpn = [0]*len(nums)
        for i in range(1,len(nums)):
            dpn[i] = min(dp[i-1]*nums[i], nums[i], dpn[i-1]*nums[i])
            dp[i] = max(dp[i-1]*nums[i], nums[i], dpn[i-1]*nums[i])
        return max(dp)

Java:
class Solution {
    public int maxProduct(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int[] dpn = new int[nums.length];
        dpn[0] = nums[0];
        int res = nums[0];
        for(int i = 1; i < nums.length;i++){
            dpn[i] = Math.min(nums[i], Math.min(dp[i-1]*nums[i], dpn[i-1]*nums[i]));
            dp[i] = Math.max(nums[i], Math.max(dp[i-1]*nums[i], dpn[i-1]*nums[i]));
            if(dp[i] > res) res = dp[i];
        }
        return res;
    }
}
