Python:
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        if not nums:
            return 0
        record = {nums[0]:1, -nums[0]:1} if nums[0] != 0 else {0:2}
        for i in range(1,len(nums)):
            temp = {}
            for j in record:
                temp[j+nums[i]] = temp.get(j+nums[i], 0) + record.get(j, 0)
                temp[j-nums[i]] = temp.get(j-nums[i], 0) + record.get(j, 0)
            record = temp
        return record.get(S, 0)

Java:
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        if(nums == null || nums.length == 0) return 0;
        Map<Integer, Integer> record = new HashMap<>();
        if(nums[0] == 0){
            record.put(0,2);
        }else{
            record.put(nums[0],1);
            record.put(-nums[0],1);
        }
        for(int i = 1;i < nums.length;i++){
            Map<Integer, Integer> temp = new HashMap<>();
            for(int j: record.keySet()){
                temp.put(j-nums[i], temp.getOrDefault(j-nums[i],0) + record.get(j));
                temp.put(j+nums[i], temp.getOrDefault(j+nums[i],0) + record.get(j));
            }
            record = temp;
        }
        return record.getOrDefault(S, 0);
    }
}
