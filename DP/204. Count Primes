Python:
class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 2:
            return 0
        dp = [True] * n
        dp[0], dp[1] = False, False
        for i in range(2, int(n**0.5)+1):
            if dp[i]:
                dp[i*i:n:i] = [False]*len(dp[i*i:n:i])
        return sum(dp)

Java:
class Solution {
    public int countPrimes(int n) {
        if(n <= 1) return 0;
        boolean[] notPrime = new boolean[n];
        notPrime[0] = true;
        notPrime[1] = true;
        int count = 0;
        for(int i = 2; i < Math.sqrt(n); i++){
            if(!notPrime[i]){
                for(int j = 2; i*j < n; j++){
                    notPrime[i*j] = true;
                }
            }
        }
        for(int i = 2; i < n;i++){
            if(!notPrime[i]) count++;
        }
        return count;
    }
}
