class Solution:
    Python:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix:
            return False
        m = len(matrix)
        n = len(matrix[0])
        return self.DFS(matrix, target, 0, n-1, m)
        
    def DFS(self, matrix, target, i, j, m):
        if j < 0 or i > m-1:
            return False
        if matrix[i][j] == target:
            return True
        elif matrix[i][j] < target:
            return self.DFS(matrix, target, i+1, j, m)
        else:
            return self.DFS(matrix, target, i, j-1, m)

Java:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        int i = 0;
        int j = matrix[0].length-1;
        while(j >=0 && i < matrix.length){
            if(matrix[i][j] == target) return true;
            if(matrix[i][j] < target){
                i++;
            }else{
                j--;
            }
        }
        return false;
    }
}
