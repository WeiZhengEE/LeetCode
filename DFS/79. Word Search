Python:
class Solution:    
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, i, j, word):
                    return True
        return False
    
    def dfs(self, board, i, j, word):
        if not word:
            return True
        if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or board[i][j] != word[0]:
            return False
        tmp = board[i][j]
        board[i][j] = '#'
        res = self.dfs(board, i-1, j, word[1:]) or self.dfs(board, i+1, j, word[1:]) \
        or self.dfs(board, i, j-1, word[1:]) or self.dfs(board, i, j+1, word[1:])
        board[i][j] = tmp
        return res

Java:
class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(dfs(board, i, j, word)) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, int i, int j, String word){
        if(word.isEmpty()) return true;
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(0)) return false;
        char temp = board[i][j];
        board[i][j] = '#';
        word = word.substring(1,word.length());
        boolean res = dfs(board, i-1, j, word) || dfs(board, i+1, j, word) || dfs(board, i, j-1, word) || dfs(board, i, j+1, word);
        board[i][j] = temp;
        return res;
    }
}
