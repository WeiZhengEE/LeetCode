Python:
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for i in range(numCourses)]
        visit = [0 for i in range(numCourses)]
        
        for i in prerequisites:
            graph[i[0]].append(i[1])
                   
        for i in range(numCourses):
            if not self.dfs(i, graph, visit):
                return False
            
        return True
    
    def dfs(self, i, graph, visit):
        if visit[i] == 1:
            return False
        if visit[i] == -1:
            return True

        visit[i] = 1

        for j in graph[i]:
            if not self.dfs(j, graph, visit):
                return False

        visit[i] = -1
        return True

Java:
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList[] graph = new ArrayList[numCourses];
        for(int i = 0; i < numCourses; i++) graph[i] = new ArrayList<Integer>();
        int[] visited = new int[numCourses];
        for(int i = 0; i < prerequisites.length;i++){
            graph[prerequisites[i][0]].add(prerequisites[i][1]);
        }
        for(int i = 0; i < numCourses;i++){
            if(!dfs(graph, visited, i)) return false;
        }
        return true;
    }
    public boolean dfs(ArrayList[] graph, int[] visited, int i){
        if(visited[i] == 1) return false;
        if(visited[i] == -1) return true;
        visited[i] = 1;
        for(int j = 0; j < graph[i].size();j++){
            if(!dfs(graph, visited, (int)graph[i].get(j))) return false;
        }
        
        visited[i] = -1;
        return true;
    }
}
