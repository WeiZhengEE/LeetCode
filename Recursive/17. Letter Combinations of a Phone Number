Python:
class Solution:
    def letterCombinations(self, digits):
        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                   '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        if len(digits) == 0:
            return []
        if len(digits) == 1:
            return list(mapping[digits[0]])
        prev = self.letterCombinations(digits[:-1])
        additional = mapping[digits[-1]]
        return [s + c for s in prev for c in additional]

Java:
class Solution {
    public List<String> letterCombinations(String digits) {
        String letters[] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        List<String> result = new ArrayList<>();
        if(digits.length() == 0) return result;
        result.add("");
        for(int i = 0;i < digits.length();i++){
            result = combine(letters[digits.charAt(i)-'0'], result);
        }
        return result;
    }
    
    public List<String> combine(String s, List<String> words){
        List<String> result = new ArrayList<>();
        for(int i = 0; i < s.length(); i++){
            for(String word: words){
                result.add(word+s.charAt(i));
            }
        }
        return result;
    }
}
